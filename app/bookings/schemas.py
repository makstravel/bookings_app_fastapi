# Импортируем нужные типы для работы с датами и необязательными полями.
from datetime import date
from typing import Optional

# Импортируем базовую модель Pydantic для создания схем.
from pydantic import BaseModel


# Схема для бронирования с основными данными.
class SBooking(BaseModel):
    id: int  # Идентификатор бронирования.
    room_id: int  # Идентификатор комнаты, в которой сделано бронирование.
    user_id: int  # Идентификатор пользователя, который сделал бронирование.
    date_from: date  # Дата начала бронирования.
    date_to: date  # Дата окончания бронирования.
    price: int  # Цена за один день проживания.
    total_cost: int  # Общая стоимость бронирования (вычисляемое поле).
    total_days: int  # Общее количество дней бронирования (вычисляемое поле).

    # Включаем режим совместимости с объектами ORM (SQLAlchemy),
    # чтобы данные могли быть автоматически преобразованы из объектов базы данных в схемы.
    class Config:
        orm_mode = True


# Расширенная схема бронирования с дополнительной информацией о номере.
class SBookingInfo(SBooking):
    image_id: int  # Идентификатор изображения комнаты.
    name: str  # Название комнаты или номера.
    description: Optional[str]  # Описание комнаты (необязательное поле).
    services: list[str]  # Список услуг, доступных в номере.

    # Включаем режим совместимости с ORM, как и в предыдущей схеме.
    class Config:
        orm_mode = True


# Схема для создания нового бронирования.
class SNewBooking(BaseModel):
    room_id: int  # Идентификатор комнаты, которую бронируют.
    date_from: date  # Дата начала бронирования.
    date_to: date  # Дата окончания бронирования.
